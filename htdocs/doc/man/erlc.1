.TH erlc 1 "erts  5.6.3" "Ericsson AB" "USER COMMANDS"
.SH 名前
erlc \- コンパイラ
.SH 説明
.LP
この \fIerlc\fR プログラムは Erlang システムですべてのコンパイラを実行する共通の方法を提供します\&. 各入力ファイルの拡張次第で, \fIerlc\fR は適切なコンパイラを呼び出します\&. どのコンパイラが使用されるかに関係なく, インクルードパスや出力ディレクトリなどのパラメータが同じフラグで提供されます\&.
.LP

.SH 使い方
.LP
.B
erlc flags file1\&.ext file2\&.ext\&.\&.\&.
.br
.RS
.LP
\fIErlc\fR は1つかそれ以上のファイルをコンパイルします\&. そのファイルは拡張子を含まなければなりません, たとえば \fI\&.erl\fR は Erlang のソースコードであり, \fI\&.yrl\fR は Yecc のソースコードです\&. \fIErlc\fR は 適切なコンパイラを呼び出すために拡張子を使用します\&.
.RE
.SH 一般的なフラグ
.LP
以下のフラグがサポートされています:
.RS 2
.TP 4
.B
-I \fIdirectory\fR:
指定したディレクトリのインクルードファイルを検索するように指示します\&. \fI-include\fR や \fI-include_dir\fR ディレクティブに遭遇したとき, コンパイラは以下のディレクトリからヘッダーファイルを検索します:
.RS 4
.LP

.RS 2
.TP 4
1.
\fI"\&."\fR, これはファイルサーバーのカレントディレクトリです;
.TP 4
2.
コンパイルしたファイルの base name(訳注: ベースディレクトリ?)
.TP 4
3.
\fI-I\fR オプションを使用して指定されたディレクトリ\&. 最後に指定されたディレクトリが最初に検索されます\&.
.RE
.RE
.TP 4
.B
-o \fIdirectory\fR:
このディレクトリはコンパイラがファイルを出力すべきディレクトリです\&. もし指定しなかった場合, ファイルはカレントディレクトリに出力されるでしょう\&.
.TP 4
.B
-D\fIname\fR:
マクロの定義\&.
.TP 4
.B
-D\fIname\fR=\fIvalue\fR:
与えられた値と共にマクロを定義します\&. この値はあらゆる Erlang の term から成ります\&. 機種依存により, シェル自身が解釈する特定の文字をクオートする必要があるかもしれません\&. Unix では, タプルやリストを含む terms はクオートされなければ成りません\&. すべてのプラッフォームでスペースを含む terms はクオートされなければ成りません\&.
.TP 4
.B
-W\fInumber\fR:
警告レベルを \fInumber\fR に設定します\&. デフォルトは \fI1\fR です\&. \fI-W0\fR を使用することで警告を切ることが出来ます\&.
.TP 4
.B
-W:
\fI-W1\fR\ と同じです&. デフォルト\&.
.TP 4
.B
-v:
詳細な出力を有効にします\&.
.TP 4
.B
-b \fIoutput-type\fR:
出力ファイルの種類を指定します\&. 一般に \fIoutput-type\fR はピリオドを除いた出力ファイルの拡張子と同じです\&. このオプションはコンパイラが単一の出力フォーマットしか持たない場合は無視されます\&.

.TP 4
.B
-hybrid:
コンパイラは hybrid-heap エミュレータを使用します\&. これは主にネイティブコードをコンパイルする際に役立ちます, このコードは実行するシステムと同じシステムでコンパイルされる必要があります\&.
.TP 4
.B
-smp:
SMP エミュレータを使用してコンパイルします\&. これは主にネイティブコードをコンパイルする際に役立ちます, このコードは実行するシステムと同じシステムでコンパイルされる必要があります\&.
.TP 4
.B
--:
これ以降はオプションが続かないというシグナルです\&. 残りの引数はハイフンから始まったとしてファイル名として扱われるでしょう\&.
.TP 4
.B
+\fIterm\fR:
ハイフンでなくプラス (\&'\fI+\fR\&') で始まるフラグは Erlang term に変換され, そのままコンパイラに渡ります\&. 実例として, 以下の用に \fIexport_all\fR オプションを Erlang コンパイラに指定することが出来ます:
.RS 4
.LP


.nf
erlc +export_all file\&.erl
.fi
.LP

.LP
機種依存により, シェル自身が解釈する特定の文字をクオートする必要があるかもしれません\&. Unix では, タプルやリストを含む terms はクオートされなければ成りません\&. すべてのプラッフォームでスペースを含む terms はクオートされなければ成りません\&.
.RE
.RE
.SH 特別フラグ
.LP
このセクションのフラグは OTP システムのリビルドなど, 特別な状況で役立ちます\&.
.RS 2
.TP 4
.B
-pa \fIdirectory\fR:
呼び出された Erlang エミュレータのコードパスの先頭に \fIdirectory\fR を追加します\&. デフォルトのコンパイラから別のコンパイラを呼び出す事に使用できます\&.
.TP 4
.B
-pz \fIdirectory\fR:
呼び出された Erlang エミュレータのコードパスの最後に \fIdirectory\fR を追加します\&.
.RE
.SH サポートするコンパイラ
.RS 2
.TP 4
.B
\&.erl:
Erlang ソースコード\&. これは \fI\&.beam\fR ファイルを生成します\&.
.RS 4
.LP

.LP
このオプション -P, -E, -S は, シェルから保護するためにシングルクォートが必要で無いことを除き, +\&'P\&', +\&'E\&', +\&'S\&' と同等です\&.
 +\&'P\&', +\&'E\&', +\&'S\&' 
.LP

.LP
サポートされるオプション: -I, -o, -D, -v, -W, -b\&.
.RE
.TP 4
.B
\&.yrl:
Yecc ソースコード\&. これは \fI\&.erl\fR ファイルを生成します\&.
.RS 4
.LP

.LP
Use the -I option with the name of a file to use that file as a customized prologue file (the \fIincludefile\fR option)\&.

.LP

.LP
サポートされるオプション: -o, -v, -I, -W (上記を参照)\&.
.RE
.TP 4
.B
\&.mib:
SNMP の為の MIB です\&. これは \fI\&.bin\fR ファイルを生成します\&.
.RS 4
.LP

.LP
サポートされるオプション: -I, -o, -W\&.
.RE
.TP 4
.B
\&.bin:
SNMP の為のコンパイル済み MIB です\&. これは \fI\&.hrl\fR ファイルを生成します\&.
.RS 4
.LP

.LP
サポートされるオプション: -o, -v\&.
.RE
.TP 4
.B
\&.rel:
スクリプトファイル\&. これはブートファイルを生成します\&.
.RS 4
.LP

.LP
-I オプションで指定したディレクトリ名を使用してアプリケーションファイルを検索します(\fIsystools:make_script/2\fR のオプションリストの \fIpath\fR と同等です)\&.
.LP

.LP
サポートされるオプション: -o\&.
.RE
.TP 4
.B
\&.asn1:
ASN1 ファイル\&.
.RS 4
.LP

.LP
\fI\&.asn1\fR ファイルから\fI\&.erl\fR, \fI\&.hrl\fR, \fI\&.asn1db\fR ファイルを生成します\&. また, Erlang コンパイラに \fI+noobj\fR オプションを与えた場合を除き \fI\&.erl\fR のコンパイルと同様です\&.
.LP

.LP
サポートされるオプション: -I, -o, -b, -W\&.
.RE
.TP 4
.B
\&.idl:
IC ファイル\&.
.RS 4
.LP

.LP
IDL コンパイラを実行します\&.
.LP

.LP
サポートされるオプション: -I, -o\&.
.RE
.RE
.SH 環境変数
.RS 2
.TP 4
.B
ERLC_EMULATOR:
エミュレータを開始する為のコマンド\&. \fIerl\fR コマンドが \fIPATH\fR で与えられた環境変数に存在しない場合, \fIerlc\fR　プログラムと同じディレクトリの \fIerl\fR がデフォルトになります\&.
.RE
.SH 関連項目
.LP
erl(1), compile(3), yecc(3), snmp(3)
