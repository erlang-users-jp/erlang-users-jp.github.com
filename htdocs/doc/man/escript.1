.TH escript 1 "erts  5.7" "Ericsson AB" "USER COMMANDS"
.SH 名前
escript \- Erlang スクリプティングサポート
.SH 説明
.LP

\fIescript\fR はコマンドライン引数から読み込んだ短い Erlangプログラムを最初にコンパイルすること無く実行する為の簡単な方法を提供します。

.SH 使い方
.LP
.B
script-name script-arg1 script-arg2\&.\&.\&.
.br
.B
escript escript-flags script-name script-arg1 script-arg2\&.\&.\&.
.br
.RS
.LP
\fIescript\fR は Erlang で書かれたスクリプトを実行します。
.LP
以下に例を示します。

.nf
$ cat factorial

#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname factorial -mnesia debug verbose
main([String]) ->
    try
        N = list_to_integer(String),
        F = fac(N),
        io:format("factorial ~w = ~w\en", [N,F])
    catch
        _:_ ->
            usage()
    end;
main(_) ->
    usage()\&.

usage() ->
    io:format("usage: factorial integer\en"),
    halt(1)\&.

fac(0) -> 1;
fac(N) -> N * fac(N-1)\&.
$ factorial 5

factorial 5 = 120
$ factorial

usage: factorial integer
$ factorial five

usage: factorial integer
.fi
.LP
Erlangスクリプトのヘッダーは通常の Erlangモジュールと異なります。最初の行は \fIescript\fR が呼び出す為のインタプリタ行です。しかしながらこんな風に \fIescript\fR を呼び出すことも出来ます

.nf
$ escript factorial 5

.fi
.LP
最初の行の内容は重要ではありませんが、Erlangのコードを含める事は出来ず、それは \fI無視\fR されるでしょう。

.LP
2行目は例えば \fIEmacs\fRエディタでErlangソースファイルを編集するために何のメジャーモードを使用するかの指示を任意で含みます。もしこの指示が存在する場合、それは2行目に位置しなければなりません。
.LP
3行目(あるいはEmacs指示の有無に応じて2行目になります)はエミュレータへ引数を渡すことが出来ます。こんな風に

.nf
%%! -smp enable -sname factorial -mnesia debug verbose
.fi
.LP
このような引数行は \fI%%!\fR で始まる必要があり、行の残りをエミュレータの引数として処理します。\&.
.LP
もしあなたが \fIescript\fR 実行ファイルの場所を知っている場合、最初の行に \fIescript\fR のパスを直接指定することが出来ます。 例えば:

.nf
#!/usr/local/bin/escript
.fi
.LP
他の種類のスクリプトと同様に、スクリプトファイルに実行ビットが無ければ、ErlangスクリプトはUNIXプラットフォームで動作しません。(\fIchmod +x スクリプト名\fR を実行して実行ビットを有効にしてください。)

.LP
Erlangスクリプトファイルの残りの部分には Erlangソースコード、インライン \fIbeam\fRファイル、インラインアーカイブファイルのいずれかを含めることが出来ます。

.LP
Erlangスクリプトは常に\fImain/1\fR関数を含んでいなければなりません。スクリプトを実行すると、\fImain/1\fR関数はスクリプトに与えられた引数の文字列のリスト表現と共に呼び出されるでしょう(どんな変更や解釈も行われません)。

.LP
スクリプトの\fImain/1\fR関数が正常に終了した場合、スクリプトの終了コードは 0 になります。もし実行中に例外が生成された場合、短いメッセージが表示され、スクリプトは終了コード 127 で終了します。
.LP
0以外の終了コードを返すには、\fIhalt(ExitCode)\fRを呼び出してください; 例えば:

.nf
halt(1)\&.
.fi
.LP
スクリプトのパス名を取得するには \fIescript:script_name/0\fR を呼び出してください(このパス名は通常、絶対パスではありません)。
.LP
もしもファイルに(下記の例の様な)ソースコードを含んでいる場合、それはプリプロセッサの \fIepp\fRによって処理されます。これは(\fI?MODULE\fRの様な)定義済みマクロと同様に\fI-include_lib\fRディレクティブの様なインクルードディレクティブも使用出来る事を意味します。例えば

.nf
-include_lib("kernel/include/file\&.hrl")\&.
.fi
.LP
\fIfile:read_file_info/1\fR関数によって使用されるレコードの為にレコード定義をインクルードします。

.LP
スクリプトは実行を開始する前に構文と意味の正当性を確認します。もし(未使用の変数などの)警告がある場合、それらは表示されて実行を続けます。もしエラーがある場合、それらは表示されてスクリプトは実行されずに終了コード 127 で終了します。

.LP
\fImain/1\fR関数のモジュール宣言とエクスポート宣言は任意です。

.LP
デフォルトで、スクリプトは逐次実行されます。しかし、以下の行スクリプトファイルに含める事によってあなたはコンパイルを強制する事が出来ます:

.nf
-mode(compile)\&.
.fi
.LP
逐次解釈されたコードの実行はコンパイル済みコードの実行より遅くなります。コンパイルはそれ自体に少し時間が掛かってしまいますが、逐次解釈されたコードを何度も実行する場合にはコンパイルする価値が有るでしょう。

.LP
先に述べたように、スクリプトにはプリコンパイル済みの \fIbeam\fRコードを含む事が出来ます。プリコンパイル済みスクリプトにおけるスクリプトヘッダの解釈はスクリプトにソースコードが含まれる場合とまったく同じです。
これはファイルに前記したような \fI#!\fR や \fI%%!\fR から始まる行を追記する事によって実行可能な\fIbeam\fRファイルを作成出来る事を意味します。
プリコンパイル済みスクリプトでは、\fImain/1\fR関数はエクスポートされている必要があります。

.LP

もう一つの選択肢はスクリプト内でErlangアーカイブ全体を持つことは出来ます。
アーカイブスクリプトにおけるスクリプトヘッダの解釈はスクリプトにソースコードが含まれる場合とまったく同じです。
これはファイルに前記したような \fI#!\fR や \fI%%!\fR から始まる行を追記する事によって実行可能なアーカイブファイルを作成出来る事を意味します。
アーカイブスクリプトでは、\fImain/1\fR関数はエクスポートされている必要があります。
デフォルトでモジュールとベース名が同じ \fIescript\fRファイルの \fImain/1\fR関数が呼び出されます。
この挙動は、\fI-escript main Module\fRというようなエミュレータフラグを設定することで上書きすることが出来ます。
この\fIModule\fRはエクスポートされた\fImain/1\fR関数を持つモジュール名でなければなりません。
アーカイブとコードの読み込みに関するさらなる情報は code(3) を参照してください。

.SS 警告:
.LP
アーカイブファイルからコード読み込みは実験的です。準備が出来る前にリリースを行う唯一の目的は早期のフィードバックを得るためです。ファイルフォーマットや文法、インターフェースなどは将来のリリースで変更されるかもしれません。\fI-escript\fRフラグもまた実験的です。

.RE
.SH ESCRIPTで使用できるオプション
.RS 2
.TP 4
.B
-s:
スクリプトファイルの構文と意味チェックのみを行います。警告とエラーが在れば標準出力に書き出しますがスクリプトの実行は行いません。エラーが無ければ終了コードは 0 となり、そうで無ければ 127 になります。
.RE
